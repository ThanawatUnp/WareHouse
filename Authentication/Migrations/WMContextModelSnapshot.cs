// <auto-generated />
using System;
using Authentication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Authentication.Migrations
{
    [DbContext(typeof(WMContext))]
    partial class WMContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Authentication.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("customer_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("customer_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fax_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SubDistrictId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Authentication.Models.District", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("District_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Authentication.Models.InboundItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InboundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("cost")
                        .HasColumnType("float");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("line_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.Property<int>("remain_qty")
                        .HasColumnType("int");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InboundOrderId");

                    b.HasIndex("ItemId");

                    b.ToTable("InboundItem");
                });

            modelBuilder.Entity("Authentication.Models.InboundOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid>("StatusInboundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("close_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("close_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("close_remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("expect_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("order_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StatusInboundOrderId");

                    b.HasIndex("SupplierId");

                    b.ToTable("InboundOrder");
                });

            modelBuilder.Entity("Authentication.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemReceivedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("StatusInventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemReceivedId");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusInventoryId");

                    b.ToTable("Inventory");
                });

            modelBuilder.Entity("Authentication.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("QueueTypeId")
                        .HasColumnType("int");

                    b.Property<double?>("cost")
                        .HasColumnType("float");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("file_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("item_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("unit")
                        .HasColumnType("int");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.HasIndex("QueueTypeId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Authentication.Models.ItemCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Authentication.Models.ItemReceived", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InboundItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ItemReceivedStateId")
                        .HasColumnType("int");

                    b.Property<double?>("cost")
                        .HasColumnType("float");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("expire_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("lot_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("receive_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("receive_qty")
                        .HasColumnType("int");

                    b.Property<int>("remain_putaway")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("InboundItemId");

                    b.HasIndex("ItemReceivedStateId");

                    b.ToTable("ItemReceived");
                });

            modelBuilder.Entity("Authentication.Models.ItemReceivedState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ItemReceivedState");
                });

            modelBuilder.Entity("Authentication.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("location_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("mix_expire")
                        .HasColumnType("bit");

                    b.Property<bool>("mix_item")
                        .HasColumnType("bit");

                    b.Property<bool>("mix_lot")
                        .HasColumnType("bit");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocationCategoryId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("Authentication.Models.LocationCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("category_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocationCategory");
                });

            modelBuilder.Entity("Authentication.Models.OrderType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("order_type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderType");
                });

            modelBuilder.Entity("Authentication.Models.OutboundItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ItemReceivedStateId")
                        .HasColumnType("int");

                    b.Property<Guid>("OutboundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("cost")
                        .HasColumnType("float");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.Property<int>("remain_qty")
                        .HasColumnType("int");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemReceivedStateId");

                    b.HasIndex("OutboundOrderId");

                    b.ToTable("OutboundItem");
                });

            modelBuilder.Entity("Authentication.Models.OutboundOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("OrderTypeId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<Guid>("StatusOutboundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("cancel_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("cancel_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("cancel_remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("invoice_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("order_no")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("plan_ship_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderTypeId");

                    b.HasIndex("StatusOutboundOrderId");

                    b.ToTable("OutboundOrder");
                });

            modelBuilder.Entity("Authentication.Models.Province", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Province_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Province_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Authentication.Models.QueueType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("QueueType");
                });

            modelBuilder.Entity("Authentication.Models.StatusInboundOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InboundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusInboundOrder");
                });

            modelBuilder.Entity("Authentication.Models.StatusInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusInventory");
                });

            modelBuilder.Entity("Authentication.Models.StatusOutboundOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OutboundOrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusOutboundOrder");
                });

            modelBuilder.Entity("Authentication.Models.SubDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<string>("SubDistrict_Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDistrict_Eng")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubDistrict_Thai")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("SubDistrict");
                });

            modelBuilder.Entity("Authentication.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DistrictId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinceId")
                        .HasColumnType("int");

                    b.Property<int?>("SubDistrictId")
                        .HasColumnType("int");

                    b.Property<bool>("active")
                        .HasColumnType("bit");

                    b.Property<string>("address1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("contact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("create_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("create_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("edit_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("edit_date")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("fax_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("file_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("mobile_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("phone_no")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("priority")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplier_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supplier_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zipcode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("SubDistrictId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("Authentication.Models.UserMangement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("reset_state")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("sub_action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("user_define3")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserMangement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Authentication.Models.Customer", b =>
                {
                    b.HasOne("Authentication.Models.District", "District")
                        .WithMany("Customer")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Authentication.Models.Province", "Province")
                        .WithMany("Customer")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Authentication.Models.SubDistrict", "SubDistrict")
                        .WithMany("Customer")
                        .HasForeignKey("SubDistrictId");
                });

            modelBuilder.Entity("Authentication.Models.District", b =>
                {
                    b.HasOne("Authentication.Models.Province", "Province")
                        .WithMany("District")
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("Authentication.Models.InboundItem", b =>
                {
                    b.HasOne("Authentication.Models.InboundOrder", "InboundOrder")
                        .WithMany("InboundItem")
                        .HasForeignKey("InboundOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.Item", "Item")
                        .WithMany("InboundItem")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Models.InboundOrder", b =>
                {
                    b.HasOne("Authentication.Models.Customer", "Customer")
                        .WithMany("InboundOrder")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Authentication.Models.OrderType", "OrderType")
                        .WithMany("InboundOrder")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.StatusInboundOrder", "StatusInboundOrder")
                        .WithMany("InboundOrder")
                        .HasForeignKey("StatusInboundOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.Supplier", "Supplier")
                        .WithMany("InboundOrder")
                        .HasForeignKey("SupplierId");
                });

            modelBuilder.Entity("Authentication.Models.Inventory", b =>
                {
                    b.HasOne("Authentication.Models.ItemReceived", "ItemReceived")
                        .WithMany("Inventory")
                        .HasForeignKey("ItemReceivedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.Location", "Location")
                        .WithMany("Inventory")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.StatusInventory", "StatusInventory")
                        .WithMany("Inventory")
                        .HasForeignKey("StatusInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Models.Item", b =>
                {
                    b.HasOne("Authentication.Models.ItemCategory", "ItemCategory")
                        .WithMany("Item")
                        .HasForeignKey("ItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.QueueType", "QueueType")
                        .WithMany("Item")
                        .HasForeignKey("QueueTypeId");
                });

            modelBuilder.Entity("Authentication.Models.ItemReceived", b =>
                {
                    b.HasOne("Authentication.Models.InboundItem", "InboundItem")
                        .WithMany("ItemReceived")
                        .HasForeignKey("InboundItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.ItemReceivedState", "ItemReceivedState")
                        .WithMany("ItemReceived")
                        .HasForeignKey("ItemReceivedStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Models.Location", b =>
                {
                    b.HasOne("Authentication.Models.LocationCategory", "LocationCategory")
                        .WithMany("Location")
                        .HasForeignKey("LocationCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Models.OutboundItem", b =>
                {
                    b.HasOne("Authentication.Models.Item", "Item")
                        .WithMany("OutboundItem")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.ItemReceivedState", "ItemReceivedState")
                        .WithMany("OutboundItem")
                        .HasForeignKey("ItemReceivedStateId");

                    b.HasOne("Authentication.Models.OutboundOrder", "OutboundOrder")
                        .WithMany("OutboundItem")
                        .HasForeignKey("OutboundOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Models.OutboundOrder", b =>
                {
                    b.HasOne("Authentication.Models.Customer", "Customer")
                        .WithMany("OutboundOrder")
                        .HasForeignKey("CustomerId");

                    b.HasOne("Authentication.Models.OrderType", "OrderType")
                        .WithMany("OutboundOrder")
                        .HasForeignKey("OrderTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authentication.Models.StatusOutboundOrder", "StatusOutboundOrder")
                        .WithMany("OutboundOrder")
                        .HasForeignKey("StatusOutboundOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Authentication.Models.SubDistrict", b =>
                {
                    b.HasOne("Authentication.Models.District", "District")
                        .WithMany("SubDistrict")
                        .HasForeignKey("DistrictId");
                });

            modelBuilder.Entity("Authentication.Models.Supplier", b =>
                {
                    b.HasOne("Authentication.Models.District", "District")
                        .WithMany("Supplier")
                        .HasForeignKey("DistrictId");

                    b.HasOne("Authentication.Models.Province", "Province")
                        .WithMany("Supplier")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("Authentication.Models.SubDistrict", "SubDistrict")
                        .WithMany("Supplier")
                        .HasForeignKey("SubDistrictId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
